import{_ as o,r as e,o as p,a as c,b as n,d as a,w as t,F as l,e as u,c as i}from"./app.b5660828.js";const r={},k=n("code",null,"English Version",-1),d=u(" | "),h=n("code",null,"\u4E2D\u6587\u7248\u672C",-1),m=i(`<p>This article is mainly about how vue renderer module work, and a lightweight renderer is given as an example.</p><p>In this article, will introduce <code>VDOM</code> and the structure of the <code>VDOM</code>, then will explain how to convert the <code>VDOM</code> to a <code>Real DOM</code>, next will show how vue diff the new and old <code>VDOM</code> to patch the <code>DOM</code>. Finally will give the benefits of using VDOM.</p><p>You can get the source code with the Online Demo: <a href="https://codepen.io/louisyoungx/pen/yLzPGME" target="_blank" rel="noopener noreferrer">CodePen - Renderer Module of Vue.js</a></p><h2 id="what-is-vdom" tabindex="-1"><a class="header-anchor" href="#what-is-vdom" aria-hidden="true">#</a> What is <code>VDOM</code>?</h2><p><code>VDOM</code> means Virtual DOM. Let&#39;s compare real DOM and virtual DOM.</p><p>It&#39;s a real dom</p><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>red<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>title<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello, world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>How are you<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><p>and the virtual dom equivalent of this real dom is</p><div class="language-json ext-json"><pre class="language-json"><code><span class="token punctuation">{</span>
    tag<span class="token operator">:</span> &#39;div&#39;<span class="token punctuation">,</span>
    props<span class="token operator">:</span> <span class="token punctuation">{</span>
        class<span class="token operator">:</span> &#39;red&#39;<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    children<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            tag<span class="token operator">:</span> &#39;h1&#39;<span class="token punctuation">,</span>
            props<span class="token operator">:</span> <span class="token punctuation">{</span>
                id<span class="token operator">:</span> &#39;title&#39;<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            children<span class="token operator">:</span> &#39;Hello<span class="token punctuation">,</span> world!&#39;
        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            tag<span class="token operator">:</span> &#39;p&#39;<span class="token punctuation">,</span>
            children<span class="token operator">:</span> <span class="token punctuation">[</span>&#39;How are you&#39;<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>So how vue transform this <code>VDOM</code> to a real dom?</p><h2 id="the-structure-of-the-vdom" tabindex="-1"><a class="header-anchor" href="#the-structure-of-the-vdom" aria-hidden="true">#</a> The structure of the <code>VDOM</code></h2><p>The VDOM could be as simple as a string.</p><blockquote><div class="language-json ext-json"><pre class="language-json"><code>&#39;div&#39;
</code></pre></div><p>VDOM also can be a object with three keys</p></blockquote><ul><li><code>tag</code>: String(required)</li><li><code>props</code>: Object | null</li><li><code>children</code>: List&lt;Object|String&gt;</li></ul><h3 id="tag" tabindex="-1"><a class="header-anchor" href="#tag" aria-hidden="true">#</a> Tag</h3><p>A tag is required. And the type of tag should be a String.</p><blockquote><div class="language-json ext-json"><pre class="language-json"><code>tag<span class="token operator">:</span> &#39;div&#39;
</code></pre></div></blockquote><h3 id="props" tabindex="-1"><a class="header-anchor" href="#props" aria-hidden="true">#</a> Props</h3><p>Props has two situation</p><ul><li><p>instance of Object</p><blockquote><div class="language-json ext-json"><pre class="language-json"><code>props<span class="token operator">:</span> <span class="token punctuation">{</span>
 class<span class="token operator">:</span> &#39;red&#39;<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div></blockquote></li><li><p>not exist</p><blockquote><div class="language-json ext-json"><pre class="language-json"><code>props<span class="token operator">:</span> <span class="token null keyword">null</span>
</code></pre></div></blockquote></li></ul><h3 id="children" tabindex="-1"><a class="header-anchor" href="#children" aria-hidden="true">#</a> Children</h3><p>Children has three type of situations</p><ul><li><p>The value can be a string</p><blockquote><div class="language-json ext-json"><pre class="language-json"><code>children<span class="token operator">:</span> &#39;Hello<span class="token punctuation">,</span> world!&#39;
</code></pre></div></blockquote></li><li><p>The value also can be a array</p><blockquote><div class="language-json ext-json"><pre class="language-json"><code>children<span class="token operator">:</span> <span class="token punctuation">[</span>
 &#39;Hello<span class="token punctuation">,</span> world!&#39;<span class="token punctuation">,</span>
 <span class="token punctuation">{</span>
     tag<span class="token operator">:</span> &#39;p&#39;<span class="token punctuation">,</span>
     children<span class="token operator">:</span> <span class="token punctuation">[</span>&#39;How are you&#39;<span class="token punctuation">]</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre></div></blockquote></li><li><p>not exist</p><blockquote><div class="language-json ext-json"><pre class="language-json"><code>children<span class="token operator">:</span> <span class="token null keyword">null</span>
</code></pre></div></blockquote></li></ul><h2 id="how-to-convert-the-vdom-to-the-real-dom" tabindex="-1"><a class="header-anchor" href="#how-to-convert-the-vdom-to-the-real-dom" aria-hidden="true">#</a> How to convert the <code>VDOM</code> to the <code>real DOM</code>?</h2><p>As we discussed before, we need to discuss all possible scenarios, including the different types of the three keys listed above.</p><h3 id="vdom-in-vue-js" tabindex="-1"><a class="header-anchor" href="#vdom-in-vue-js" aria-hidden="true">#</a> <code>VDOM</code> in <code>Vue.js</code></h3><p>Here is a vdom in vue</p><blockquote><p>\u26A0\uFE0F Please notice that this <code>VDOM</code> is different from the previous <code>VDOM</code>, it&#39;s vnode wrapped with <code>h</code> function.</p></blockquote><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> vdom <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
    <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token comment">// tag</span>
    <span class="token punctuation">{</span> <span class="token comment">// props</span>
        <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&quot;red&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span> <span class="token comment">// children</span>
        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;div one&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
            <span class="token string">&quot;div two&quot;</span><span class="token punctuation">,</span>
            <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;headline one&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>And the HTML body is now like this</p><div class="language-html ext-html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><h3 id="why-vdom-node-is-wrapped-in-a-h-function" tabindex="-1"><a class="header-anchor" href="#why-vdom-node-is-wrapped-in-a-h-function" aria-hidden="true">#</a> Why <code>vdom node</code> is wrapped in a <strong><code>h</code></strong> function ?</h3><p><code>h</code> means <code>Hyperscript</code>, stands for <em>&quot;script that generates HTML structures&quot;</em></p><p>It will help us to create the <code>VDOM</code> object, so we don&#39;t have to write <code>tag</code>, <code>props</code>, <code>children</code> key name over and over again.</p><p>The <code>h</code> function is like</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token parameter">tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// if the tag or children is number, change them to string</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> tag <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tag <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> children <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        children <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        tag<span class="token punctuation">,</span>
        props<span class="token punctuation">,</span>
        children<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="mount-vdom-to-dom" tabindex="-1"><a class="header-anchor" href="#mount-vdom-to-dom" aria-hidden="true">#</a> Mount <code>VDOM</code> to <code>DOM</code></h3><p>We need a root dom node to mount dom that created by us.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;app&quot;</span><span class="token punctuation">)</span>
</code></pre></div><p>Next we need a <code>mount</code> function to help us create real dom node and mount them to their container dom node.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> element<span class="token punctuation">;</span>

    <span class="token comment">// is vnode a string</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> vnode <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        container<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vnode<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// if not, create a real dom with value of vnode.tag</span>
        <span class="token comment">// and store the dom to the vnode object (keep for patch)</span>
        element <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// is props exist</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// if exist, set attribute to the dom</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> attr <span class="token keyword">in</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> value <span class="token operator">=</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// if the attr is function(start with &#39;on&#39;), add a event listener</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;on&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attr<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// is children exist</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> vnode<span class="token punctuation">.</span>children <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// The value of children is string</span>
            element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// The value of children is array</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> child <span class="token keyword">of</span> vnode<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Every item of children is a vnode, recurse them with mount function</span>
                <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        container<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="patch-the-dom-while-vdom-update" tabindex="-1"><a class="header-anchor" href="#patch-the-dom-while-vdom-update" aria-hidden="true">#</a> Patch the <code>DOM</code> while <code>VDOM</code> update</h2><p>Diff the new vdom to the old vdom and patch the real dom.</p><h3 id="compare-the-tag" tabindex="-1"><a class="header-anchor" href="#compare-the-tag" aria-hidden="true">#</a> Compare the tag</h3><p>If the tag of new vdom and old vdom is different, replace the entire dom node.</p><h3 id="compare-the-props" tabindex="-1"><a class="header-anchor" href="#compare-the-props" aria-hidden="true">#</a> Compare the props</h3><ul><li>find out the newly added prop, and add it to the dom</li><li>find out the prop no longer exists, and remove it from the dom</li></ul><h3 id="compare-the-children" tabindex="-1"><a class="header-anchor" href="#compare-the-children" aria-hidden="true">#</a> Compare the children</h3><p>There are four type combinations of new and old vdom children</p><table><thead><tr><th>new children</th><th>old children</th></tr></thead><tbody><tr><td>String</td><td>String</td></tr><tr><td>String</td><td>Array</td></tr><tr><td>Array</td><td>Array</td></tr><tr><td>Array</td><td>String</td></tr></tbody></table><p>We need to handle all possible combinations.</p><h3 id="patch-function" tabindex="-1"><a class="header-anchor" href="#patch-function" aria-hidden="true">#</a> <code>patch</code> function</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">older<span class="token punctuation">,</span> newer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> element <span class="token operator">=</span> newer<span class="token punctuation">.</span>element <span class="token operator">=</span> older<span class="token punctuation">.</span>element<span class="token punctuation">;</span>

    <span class="token comment">// compare the tag</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>older<span class="token punctuation">.</span>tag <span class="token operator">!==</span> newer<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// update the old dom node</span>
        element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>
        <span class="token function">mount</span><span class="token punctuation">(</span>newer<span class="token punctuation">,</span> element<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// compare the props</span>
    <span class="token keyword">const</span> oldProps <span class="token operator">=</span> older<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> newProps <span class="token operator">=</span> newer<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> newProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// find out the newly added prop</span>
        oldValue <span class="token operator">=</span> oldProps<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
        newValue <span class="token operator">=</span> newProps<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// if the prop is changed in newer DOM or the prop is newly added</span>
            element<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> prop <span class="token keyword">in</span> oldProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// find out the prop no longer exists</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>prop <span class="token keyword">in</span> newProps<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// if the prop is not existed in the newer DOM</span>
            element<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// compare the children</span>
    <span class="token keyword">const</span> oldChildren <span class="token operator">=</span> older<span class="token punctuation">.</span>children<span class="token punctuation">;</span>
    <span class="token keyword">const</span> newChildren <span class="token operator">=</span> newer<span class="token punctuation">.</span>children<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> newChildren <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldChildren <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// both new children and old children are string</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldChildren <span class="token operator">!==</span> newChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// they are not equal</span>
                element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newChildren<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// the new children is string but old children is array</span>
            element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> newChildren<span class="token punctuation">;</span> <span class="token comment">// overwrite the DOM</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> oldChildren <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// the new children is array but old children is string</span>
            element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span> <span class="token comment">// reset this dom node</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> child <span class="token keyword">of</span> newChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// recreate the dom nodes with the vnodes in new children</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// both new children and old children are array</span>
            <span class="token keyword">const</span> commonLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">,</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> commonLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Iterate the part that they all have</span>
                <span class="token function">patch</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// if the new children is longer, add the rest vdom node to the dom node</span>
                newChildren<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>oldChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    <span class="token function">mount</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                oldChildren<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>newChildren<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">child</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                    element<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="benefits-of-using-vdom" tabindex="-1"><a class="header-anchor" href="#benefits-of-using-vdom" aria-hidden="true">#</a> Benefits of using <code>VDOM</code></h2><h3 id="why-vue3-still-using-vdom" tabindex="-1"><a class="header-anchor" href="#why-vue3-still-using-vdom" aria-hidden="true">#</a> Why Vue3 still using VDOM?</h3><p>Vue3 has made a lot of optimizations to the patch function.</p><p>Compare to our lightweight demo, Vue3 optimize vnode with the <code>:key</code> attribute in <code>v-for</code> template syntax (corresponding to lines 56 to 71 of our patch function)</p><p>And Vue3 can also skip the <code>props</code>, <code>children</code> part if it&#39;s not necessary. At the same time, the block optimization essentially avoids having to call this on most of the nodes.</p><blockquote><p>Evan You: In reality, the update is so performant</p></blockquote><p>Otherwise, vdom can let us directly use render function syntax, which is much more flexible that the template syntax. This capability has proven to be really useful and important for library authors.</p><p>So Vue3 decided to stick to virtual DOM because of the benefits that it provides, and at the same time vue team is still trying to leverage the compiler to make the diffing as efficient as possible.</p><p>In conclusion, compare to generate direct imperative DOM operations, Vue provide the same class of performance, and the same time still provide the ability to drop down to use a more flexible language to express logic.</p><blockquote><p>Evan You: The goal to have the best of both worlds is achieved in Vue3 that into a certain degree.</p></blockquote><h2 id="get-source-code" tabindex="-1"><a class="header-anchor" href="#get-source-code" aria-hidden="true">#</a> Get source code</h2><p>You can get the final code with this <strong>Online Demo</strong></p><p><a href="https://codepen.io/louisyoungx/pen/yLzPGME" target="_blank" rel="noopener noreferrer">CodePen - Renderer Module of Vue.js</a></p><blockquote><p>All knowledge points are extracted from <a href="https://www.vuemastery.com/courses/vue3-deep-dive-with-evan-you/" target="_blank" rel="noopener noreferrer">Evan You&#39;s Vue Mastery Course</a>, so if there are errors in this article, <s>it must be Evan You&#39;s mistake</s> please point out errors in the comments section.</p></blockquote>`,67);function g(f,w){const s=e("RouterLink");return p(),c(l,null,[n("p",null,[a(s,{to:"/post/2021/12/26/renderer-module-of-vue/"},{default:t(()=>[k]),_:1}),d,a(s,{to:"/post/2021/12/27/renderer-module-of-vue/"},{default:t(()=>[h]),_:1})]),m],64)}var y=o(r,[["render",g],["__file","index.html.vue"]]);export{y as default};
