(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{591:function(a,t,s){"use strict";s.r(t);var e=s(55),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("自定义vimrc与常用插件，vscode vim，网络配置，awk语言详解，shell脚本入⻔")]),a._v(" "),s("h2",{attrs:{id:"自定义vimrc配置与vim常用开发插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义vimrc配置与vim常用开发插件"}},[a._v("#")]),a._v(" 自定义vimrc配置与vim常用开发插件")]),a._v(" "),s("ol",[s("li",[a._v("编辑器设置")]),a._v(" "),s("li",[a._v("界面设置")]),a._v(" "),s("li",[a._v("恢复光标位置")]),a._v(" "),s("li",[a._v("基本的映射")]),a._v(" "),s("li",[a._v("Vim-Plug 插件\n需要在命令行执行以下命令安装vim-plug")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("curl")]),a._v(" -fLo ~/.vim/autoload/plug.vim --create-dirs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("\\")]),a._v("\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n")])])]),s("ol",{attrs:{start:"7"}},[s("li",[a._v("插件环境")])]),a._v(" "),s("h2",{attrs:{id:"vscode-vim插件配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vscode-vim插件配置"}},[a._v("#")]),a._v(" vscode vim插件配置")]),a._v(" "),s("ol",[s("li",[a._v("安装vim插件")]),a._v(" "),s("li",[a._v("配置vimrc地址")])]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$HOME")]),a._v("/.vim/vimrc\n")])])]),s("ol",[s("li",[a._v("配置settings.json")])]),a._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"vim.useSystemClipboard"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"vim.cursorStylePerMode.insert"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"line"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"vim.cursorStylePerMode.normal"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"underline"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"vim.cursorStylePerMode.replace"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"block-outline"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"vim.cursorStylePerMode.visual"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"line"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"vim.cursorStylePerMode.visualline"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"line"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"vim.cursorStylePerMode.visualblock"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"line"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"vim.handleKeys"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"<D-c>"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[a._v('"<shift-alt>"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n")])])]),s("h2",{attrs:{id:"网络配置-网络属性-网络状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#网络配置-网络属性-网络状态"}},[a._v("#")]),a._v(" 网络配置（网络属性/网络状态）")]),a._v(" "),s("h3",{attrs:{id:"查看网络配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看网络配置"}},[a._v("#")]),a._v(" 查看网络配置")]),a._v(" "),s("ul",[s("li",[a._v("Windows 系统：ipconfig")]),a._v(" "),s("li",[a._v("Linux 系统：ip / ifconfig")])]),a._v(" "),s("h3",{attrs:{id:"linux-网络环境配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux-网络环境配置"}},[a._v("#")]),a._v(" Linux 网络环境配置")]),a._v(" "),s("h4",{attrs:{id:"自动获取-ip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动获取-ip"}},[a._v("#")]),a._v(" 自动获取 IP")]),a._v(" "),s("p",[a._v("用户登录后，通过界面来设置自动获取 IP。")]),a._v(" "),s("p",[a._v("缺点: Linux 启动后，每次自动获取的 IP 地址可能不一样。这个不适用于服务器，因为服务器 IP 是需要固定的。")]),a._v(" "),s("h4",{attrs:{id:"固定-ip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#固定-ip"}},[a._v("#")]),a._v(" 固定 IP")]),a._v(" "),s("p",[a._v("通过修改配置文件来指定 IP")]),a._v(" "),s("p",[a._v("配置文件根据网卡不同名字有所区别，但文件路径一致：/etc/sysconfig/network-scripts/，常见的配置文件名有\nifcfg-eth0 或者 ifcfg-ens33，可以通过 ifconfig 查看后缀。")]),a._v(" "),s("p",[a._v("以 ifcfg-ens33 为例，配置文件需要修改的内容如后面的代码块所示。")]),a._v(" "),s("p",[a._v("修改后，重启网络服务或者重启系统生效：service network restart 或者 reboot")]),a._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("BOOTPROTO")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("static "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 静态 IP")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("IPADDR")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v(".59.134 "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 本机 IP 地址")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("NETMASK")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("255.255")]),a._v(".255.0 "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 子网掩码")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("GATEWAY")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("192.168")]),a._v(".59.2 "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 默认网关")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("DNS1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8.8")]),a._v(".8.8 "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 域名解析器")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("DNS2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("8.8")]),a._v(".4.4\n")])])]),s("h3",{attrs:{id:"设置主机名和-hosts-映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置主机名和-hosts-映射"}},[a._v("#")]),a._v(" 设置主机名和 hosts 映射")]),a._v(" "),s("h4",{attrs:{id:"设置主机名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置主机名"}},[a._v("#")]),a._v(" 设置主机名")]),a._v(" "),s("ul",[s("li",[a._v("为了方便记忆，可以给 Linux 系统主机设置主机名，也可以根据需要修改主机名（大数据用到）。")]),a._v(" "),s("li",[a._v("使用 hostname 查看当前主机名")]),a._v(" "),s("li",[a._v("如需修改在文件 /etc/hostname 编辑即可")]),a._v(" "),s("li",[a._v("修改后，重启系统生效")])]),a._v(" "),s("h4",{attrs:{id:"设置-hosts-映射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置-hosts-映射"}},[a._v("#")]),a._v(" 设置 hosts 映射")]),a._v(" "),s("p",[a._v("hosts 映射可以使主机名和系统 IP 地址建立映射联系，即通过主机名就可以连接到某个主机系统，省去了 IP 地址的麻烦。"),s("br"),a._v("\nhosts 是一个文本文件，用来记录 IP 和 Hostname（主机名）的映射关系。"),s("br"),a._v("\n除去 hosts 文件，DNS 是互联网上作为域名和 IP 地址相互映射的一个分布式数据库。Domain Name System\n的缩写，翻译过来就是域名系统。")]),a._v(" "),s("p",[a._v("Windows：在 C:\\Windows\\System32\\drivers\\etc\\hosts\n文件中指定即可。如192.168.130.23 CentOS-PC")]),a._v(" "),s("p",[a._v("Linux：在 /etc/hosts 文件中指定即可。如192.168.100.13 Windows-PC")]),a._v(" "),s("h2",{attrs:{id:"awk语言详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#awk语言详解"}},[a._v("#")]),a._v(" awk语言详解")]),a._v(" "),s("p",[a._v("awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行各种分析处理。")]),a._v(" "),s("p",[a._v("awk有3个不同版本: awk、nawk和gawk，未作特别说明，一般指gawk，gawk 是 AWK 的 GNU 版本。")]),a._v(" "),s("p",[a._v("awk其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母。实际上 AWK 的确拥有自己的语言： AWK 程序设计语言 ， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。")]),a._v(" "),s("h3",{attrs:{id:"使用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[a._v("#")]),a._v(" 使用方法")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("awk '{pattern + action}' {filenames}\n")])])]),s("p",[a._v("尽管操作可能会很复杂，但语法总是这样，其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。")]),a._v(" "),s("blockquote",[s("p",[a._v("awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。")])]),a._v(" "),s("p",[a._v("通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。")]),a._v(" "),s("h3",{attrs:{id:"调用awk"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用awk"}},[a._v("#")]),a._v(" 调用awk")]),a._v(" "),s("p",[a._v("有三种方式调用awk")]),a._v(" "),s("p",[a._v("1.命令行方式\nawk [-F field-separator] 'commands' input-file(s)\n其中，commands 是真正awk命令，[-F域分隔符]是可选的。 input-file(s) 是待处理的文件。\n在awk中，文件的每一行中，由域分隔符分开的每一项称为一个域。通常，在不指名-F域分隔符的情况下，默认的域分隔符是空格。")]),a._v(" "),s("p",[a._v("2.shell脚本方式\n将所有的awk命令插入一个文件，并使awk程序可执行，然后awk命令解释器作为脚本的首行，一遍通过键入脚本名称来调用。\n相当于shell脚本首行的：#!/bin/sh\n可以换成：#!/bin/awk")]),a._v(" "),s("p",[a._v("3.将所有的awk命令插入一个单独文件，然后调用：\nawk -f awk-script-file input-file(s)\n其中，-f选项加载awk-script-file中的awk脚本，input-file(s)跟上面的是一样的。")]),a._v(" "),s("p",[a._v("本章重点介绍命令行方式。")]),a._v(" "),s("h3",{attrs:{id:"入门实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#入门实例"}},[a._v("#")]),a._v(" 入门实例")]),a._v(" "),s("p",[a._v("假设last -n 5的输出如下")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# last -n 5 仅取出前五行\nroot     pts/1  192.168.1.100 Tue Feb 10 11:21  still logged in\nroot     pts/1  192.168.1.100 Tue Feb 10 00:46 - 02:28 (01:41)\nroot     pts/1  192.168.1.100 Mon Feb 9 11:41 - 18:30 (06:48)\ndmtsai   pts/1  192.168.1.100 Mon Feb 9 11:41 - 11:41 (00:00)\nroot     tty1                   Fri Sep 5 14:09 - 14:10 (00:01)\n")])])]),s("p",[a._v("如果只是显示最近登录的5个帐号")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#last -n 5 | awk  '{print $1}'\nroot\nroot\nroot\ndmtsai\nroot\n")])])]),s("p",[a._v("awk工作流程是这样的：读入有’n’换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,"),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mn",[a._v("1")]),s("mtext",[a._v("表示第一个域")]),s("mo",{attrs:{separator:"true"}},[a._v(",")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("1表示第一个域,")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8777699999999999em","vertical-align":"-0.19444em"}}),s("span",{staticClass:"mord"},[a._v("1")]),s("span",{staticClass:"mord cjk_fallback"},[a._v("表示第一个域")]),s("span",{staticClass:"mpunct"},[a._v(",")])])])]),a._v("n表示第n个域。默认域分隔符是”空白键” 或 “键”,所以$1表示登录用户，$3表示登录用户ip,以此类推。")]),a._v(" "),s("p",[a._v("如果只是显示/etc/passwd的账户")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#cat /etc/passwd |awk  -F ':'  '{print $1}'  \nroot\ndaemon\nbin\nsys\n")])])]),s("p",[a._v("这种是awk+action的示例，每行都会执行action{print $1}。")]),a._v(" "),s("p",[a._v("-F指定域分隔符为’:’。")]),a._v(" "),s("p",[a._v("如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#cat /etc/passwd |awk  -F ':'  '{print $1\"t\"$7}'\nroot    /bin/bash\ndaemon  /bin/sh\nbin     /bin/sh\nsys     /bin/sh\n")])])]),s("p",[a._v("如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加”blue,/bin/nosh”。")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('cat /etc/passwd |awk  -F \':\' \'BEGIN {print "name,shell"}  {print $1","$7} END {print "blue,/bin/nosh"}\'\nname,shell\nroot,/bin/bash\ndaemon,/bin/sh\nbin,/bin/sh\nsys,/bin/sh\n....\nblue,/bin/nosh\n')])])]),s("p",[a._v("awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,"),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mn",[a._v("1")]),s("mtext",[a._v("表示第一个域")]),s("mo",{attrs:{separator:"true"}},[a._v(",")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("1表示第一个域,")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.8777699999999999em","vertical-align":"-0.19444em"}}),s("span",{staticClass:"mord"},[a._v("1")]),s("span",{staticClass:"mord cjk_fallback"},[a._v("表示第一个域")]),s("span",{staticClass:"mpunct"},[a._v(",")])])])]),a._v("n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。")]),a._v(" "),s("p",[a._v("搜索/etc/passwd有root关键字的所有行")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("#awk -F: '/root/' /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\n")])])]),s("p",[a._v("这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。")]),a._v(" "),s("p",[a._v("搜索支持正则，例如找root开头的: awk -F: ‘/^root/’ /etc/passwd")]),a._v(" "),s("p",[a._v("搜索/etc/passwd有root关键字的所有行，并显示对应的shell")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("# awk -F: '/root/{print $7}' /etc/passwd            \n/bin/bash\n")])])]),s("p",[a._v("这里指定了action{print $7}")]),a._v(" "),s("h3",{attrs:{id:"awk内置变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#awk内置变量"}},[a._v("#")]),a._v(" awk内置变量")]),a._v(" "),s("p",[a._v("awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。")]),a._v(" "),s("blockquote",[s("p",[a._v("ARGC 命令行参数个数\nARGV 命令行参数排列\nENVIRON 支持队列中系统环境变量的使用\nFILENAME awk浏览的文件名\nFNR 浏览文件的记录数\nFS 设置输入域分隔符，等价于命令行 -F选项\nNF 浏览记录的域的个数\nNR 已读的记录数\nOFS 输出域分隔符\nORS 输出记录分隔符\nRS 控制记录分隔符")])]),a._v(" "),s("p",[a._v("此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,……以此类推")]),a._v(" "),s("p",[a._v("统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('#awk  -F \':\'  \'{print "filename:" FILENAME ",linenumber:" NR ",columns:" NF ",linecontent:"$0}\' /etc/passwd\nfilename:/etc/passwd,linenumber:1,columns:7,linecontent:root:x:0:0:root:/root:/bin/bash\nfilename:/etc/passwd,linenumber:2,columns:7,linecontent:daemon:x:1:1:daemon:/usr/sbin:/bin/sh\nfilename:/etc/passwd,linenumber:3,columns:7,linecontent:bin:x:2:2:bin:/bin:/bin/sh\nfilename:/etc/passwd,linenumber:4,columns:7,linecontent:sys:x:3:3:sys:/dev:/bin/sh\n')])])]),s("p",[a._v("使用printf替代print,可以让代码更加简洁，易读")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("awk  -F ':' '{printf(\"filename:%10s,linenumber:%s,columns:%s,linecontent:%sn\",FILENAME,NR,NF,$0)}'/etc/passwd\n")])])]),s("h3",{attrs:{id:"print和printf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#print和printf"}},[a._v("#")]),a._v(" print和printf")]),a._v(" "),s("p",[a._v("awk中同时提供了print和printf两种打印输出的函数。")]),a._v(" "),s("p",[a._v("其中print函数的参数可以是变量、数值或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空格而已。")]),a._v(" "),s("p",[a._v("printf函数，其用法和c语言中printf基本相似,可以格式化字符串,输出复杂时，printf更加好用，代码更易懂。")]),a._v(" "),s("h3",{attrs:{id:"awk编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#awk编程"}},[a._v("#")]),a._v(" awk编程")]),a._v(" "),s("h4",{attrs:{id:"变量和赋值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量和赋值"}},[a._v("#")]),a._v(" 变量和赋值")]),a._v(" "),s("p",[a._v("除了awk的内置变量，awk还可以自定义变量。")]),a._v(" "),s("p",[a._v("下面统计/etc/passwd的账户人数")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("awk '{count++;print $0;} END{print \"user count is \", count}' /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\n......\nuser count is 40\n")])])]),s("p",[a._v("count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。")]),a._v(" "),s("p",[a._v("这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('awk \'BEGIN {count=0;print "[start]user count is ", count} {count=count+1;print $0;} END{print "[end]user count is ", count}\' /etc/passwd\n[start]user count is 0\nroot:x:0:0:root:/root:/bin/bash\n...\n[end]user count is 40\n')])])]),s("p",[a._v("统计某个文件夹下的文件占用的字节数")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("ls -l |awk 'BEGIN {size=0;} {size=size+$5;} END{print \"[end]size is \", size}'\n[end]size is 8657198\n")])])]),s("p",[a._v("如果以M为单位显示:")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('ls -l |awk \'BEGIN {size=0;} {size=size+$5;} END{print "[end]size is ", size/1024/1024,"M"}\'\n[end]size is 8.25889 M\n')])])]),s("p",[a._v("注意，统计不包括文件夹的子目录。")]),a._v(" "),s("h4",{attrs:{id:"条件语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件语句"}},[a._v("#")]),a._v(" 条件语句")]),a._v(" "),s("p",[a._v("awk中的条件语句是从C语言中借鉴来的，见如下声明方式：")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("if (expression) {\n statement;\n statement;\n ... ...\n}\n \nif (expression) {\n statement;\n} else {\n statement2;\n}\n \nif (expression) {\n statement1;\n} else if (expression1) {\n statement2;\n} else {\n statement3;\n}\n")])])]),s("p",[a._v("统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('ls -l |awk \'BEGIN {size=0;print "[start]size is ", size} {if($5!=4096){size=size+$5;}} END{print "[end]size is ", size/1024/1024,"M"}\'\n[end]size is 8.22339 M\n')])])]),s("h4",{attrs:{id:"循环语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#循环语句"}},[a._v("#")]),a._v(" 循环语句")]),a._v(" "),s("p",[a._v("awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。")]),a._v(" "),s("h4",{attrs:{id:"数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),s("p",[a._v("因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。值和关键字都存储在内部的一张针对key/value应用hash的表格里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。")]),a._v(" "),s("p",[a._v("显示/etc/passwd的账户")]),a._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("awk -F ':' 'BEGIN {count=0;} {name[count] = $1;count++;}; END{for (i = 0; i ' /etc/passwd\n0 root\n1 daemon\n2 bin\n3 sys\n4 sync\n5 games\n......\n")])])]),s("p",[a._v("这里使用for循环遍历数组")]),a._v(" "),s("p",[a._v("awk编程的内容极多，这里只罗列简单常用的用法，更多请参考 "),s("a",{attrs:{href:"http://www.gnu.org/software/gawk/manual/gawk.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("http://www.gnu.org/software/gawk/manual/gawk.html")])]),a._v(" "),s("h2",{attrs:{id:"shell-编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-编程"}},[a._v("#")]),a._v(" Shell 编程")]),a._v(" "),s("p",[a._v("Linux 运维工程师在进行服务器集群管理时，需要编写 Shell 程序来进行服务器管理。")]),a._v(" "),s("p",[a._v("对于 JavaEE 和 Python 程序员来说，工作的需要，会要求你编写一些 Shell\n脚本进行程序或者是服务器的维护，比如编写一个定时备份数据库的脚本。")]),a._v(" "),s("p",[a._v("对于大数据程序员来说，需要编写 Shell 程序来管理集群。")]),a._v(" "),s("h3",{attrs:{id:"shell-是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-是什么"}},[a._v("#")]),a._v(" Shell 是什么")]),a._v(" "),s("p",[a._v("Shell 是一个命令行解释器，它为用户提供了一个向 Linux 内核发送请求以便运行程序的界面系统级程序，用户可以用 Shell\n来启动、挂起、停止甚至是编写一些程序。")]),a._v(" "),s("h3",{attrs:{id:"shell-脚本的执行方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-脚本的执行方式"}},[a._v("#")]),a._v(" Shell 脚本的执行方式")]),a._v(" "),s("p",[a._v("脚本格式要求")]),a._v(" "),s("ul",[s("li",[a._v("脚本以#!/bin/bash 开头")]),a._v(" "),s("li",[a._v("脚本需要有可执行权限")])]),a._v(" "),s("p",[a._v("脚本的常用执行方式")]),a._v(" "),s("ul",[s("li",[a._v("给要执行的脚本文件，添加可执行权限")]),a._v(" "),s("li",[a._v("直接用 sh 脚本文件名 命令执行，不用赋予脚本可执行权限")])]),a._v(" "),s("h3",{attrs:{id:"shell-变量介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-变量介绍"}},[a._v("#")]),a._v(" Shell 变量介绍")]),a._v(" "),s("p",[a._v("Linux 中 Shell 的变量分为系统变量和用户自定义变量。")]),a._v(" "),s("p",[a._v("系统变量："),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("H")]),s("mi",[a._v("O")]),s("mi",[a._v("M")]),s("mi",[a._v("E")]),s("mtext",[a._v("、")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("HOME、")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.08125em"}},[a._v("H")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05764em"}},[a._v("OME")]),s("span",{staticClass:"mord cjk_fallback"},[a._v("、")])])])]),a._v("PWD、"),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mi",[a._v("S")]),s("mi",[a._v("H")]),s("mi",[a._v("E")]),s("mi",[a._v("L")]),s("mi",[a._v("L")]),s("mtext",[a._v("、")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("SHELL、")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05764em"}},[a._v("S")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.08125em"}},[a._v("H")]),s("span",{staticClass:"mord mathnormal",staticStyle:{"margin-right":"0.05764em"}},[a._v("E")]),s("span",{staticClass:"mord mathnormal"},[a._v("LL")]),s("span",{staticClass:"mord cjk_fallback"},[a._v("、")])])])]),a._v("USER 等等，比如：echo $HOME 等等。")]),a._v(" "),s("p",[a._v("显示当前 Shell 中所有变量：set")]),a._v(" "),s("h3",{attrs:{id:"shell-变量定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-变量定义"}},[a._v("#")]),a._v(" Shell 变量定义")]),a._v(" "),s("p",[a._v("定义变量：变量=值 （注意等号两侧没有空格）")]),a._v(" "),s("p",[a._v("撤销变量：unset 变量")]),a._v(" "),s("p",[a._v("声明静态变量：readonly 变量。注意：该变量不能 unset")]),a._v(" "),s("h3",{attrs:{id:"定义变量的规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#定义变量的规则"}},[a._v("#")]),a._v(" 定义变量的规则")]),a._v(" "),s("p",[a._v("变量名称可以由字母、数字和下划线组成，但是不能以数字开头。")]),a._v(" "),s("p",[a._v("等号两侧不能有空格")]),a._v(" "),s("p",[a._v("变量名称一般习惯为大写，这是一个规范，遵守即可")]),a._v(" "),s("h3",{attrs:{id:"将命令的返回值赋给变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#将命令的返回值赋给变量"}},[a._v("#")]),a._v(" 将命令的返回值赋给变量")]),a._v(" "),s("p",[a._v("A="),s("code",[a._v("date")]),a._v("，通过反引号，运行里面的命令，并把结果返回给变量 A")]),a._v(" "),s("p",[a._v("A=$(date)等于反引号的作用")]),a._v(" "),s("p",[a._v("变量名称一般习惯为大写，这是一个规范，遵守即可")]),a._v(" "),s("h3",{attrs:{id:"shell-变量快速入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell-变量快速入门"}},[a._v("#")]),a._v(" Shell 变量快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\n#案例1：定义变量 A\nA=100\n#输出变量需要加上$\necho A=$A\necho "A=$A"\n#案例2：撤销变量 A\nunset A\necho "A=$A"\n#案例3：声明静态的变量 B=2，不能 unset\nreadonly B=2\necho "B=$B"\n#执行 unset B 命令，会报错\n#案例 4：将指令返回的结果赋给变量\nC=`date`\nD=$(date)\necho "C=$C"\necho "D=$D"\n')])])]),s("h3",{attrs:{id:"设置环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置环境变量"}},[a._v("#")]),a._v(" 设置环境变量")]),a._v(" "),s("h4",{attrs:{id:"基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),s("ul",[s("li",[a._v("export 变量名=变量值：将 Shell 变量输出为环境变量")]),a._v(" "),s("li",[a._v("source 配置文件：让修改后的配置文件立即生效")]),a._v(" "),s("li",[a._v("echo $变量名：查询环境变量的值")])]),a._v(" "),s("h4",{attrs:{id:"快速入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("#通过编辑 /etc/profile 文件配置 JDK 环境变量，要增加以下命令\nexport JAVA_HOME=/usr/local/java/jdk1.8.0_261\nexport PATH=$JAVA_HOME/bin:$PATH\n#保存退出 /etc/profile 文件后，执行 source /etc/profile 命令使修改后的配置文件生效\n")])])]),s("p",[a._v("Shell 脚本多行注释")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v(":<<!\n需要注释的第一行内容\n需要注释的第二行内容\n!\n")])])]),s("h3",{attrs:{id:"位置参数变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#位置参数变量"}},[a._v("#")]),a._v(" 位置参数变量")]),a._v(" "),s("p",[a._v("当我们执行一个 Shell 脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量，比如 ./myshell.sh 100 200 ,\n这个就是一个执行 shell 的命令行，可以在 myshell 脚本中获取到参数信息。")]),a._v(" "),s("h4",{attrs:{id:"基本语法-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法-2"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),s("ul",[s("li",[a._v("$n：n 为数字，$0 代表命令本身，$1-"),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mn",[a._v("9")]),s("mtext",[a._v("代表第一到第九个参数，十以上的参数需要用大括号，如")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("9 代表第一到第九个参数，十以上的参数需要用大括号，如")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[a._v("9")]),s("span",{staticClass:"mord cjk_fallback"},[a._v("代表第一到第九个参数，十以上的参数需要用大括号，如")])])])]),a._v("{10}")]),a._v(" "),s("li",[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML"}},[s("semantics",[s("mrow",[s("mo",[a._v("∗")]),s("mtext",[a._v("：代表命令行中所有的参数，")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("*：代表命令行中所有的参数，")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord"},[a._v("∗")]),s("span",{staticClass:"mord cjk_fallback"},[a._v("：代表命令行中所有的参数，")])])])]),a._v("*把所有的参数看成一个整体")]),a._v(" "),s("li",[a._v("$@：代表命令行中所有的参数，不过该命令是把每个参数区分对待")]),a._v(" "),s("li",[a._v("$#：代表命令行中所有参数的个数")])]),a._v(" "),s("h4",{attrs:{id:"快速入门-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门-2"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\necho "0=$0 1=$1 2=$2"\necho "命令行所有传入的参数=$*"\necho "$@"\necho "参数的个数=$#"\n')])])]),s("h3",{attrs:{id:"预定义变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#预定义变量"}},[a._v("#")]),a._v(" 预定义变量")]),a._v(" "),s("p",[a._v("Shell 设计者事先已经定义好的变量，可以直接在 Shell 脚本中使用")]),a._v(" "),s("h4",{attrs:{id:"基本语法-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法-3"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),s("ul",[s("li",[s("p",[s("span",{staticClass:"katex-display"},[s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",{attrs:{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"}},[s("semantics",[s("mrow",[s("mtext",[a._v("：当前进程的进程号")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("：当前进程的进程号\n")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"base"},[s("span",{staticClass:"strut",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),s("span",{staticClass:"mord cjk_fallback"},[a._v("：当前进程的进程号")])])])])])])]),a._v(" "),s("li",[a._v("$?：最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行；如果这个变量的值为非\n0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确")])]),a._v(" "),s("h4",{attrs:{id:"快速入门-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门-3"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\necho "当前进程号=$$"\n#后台方式运行 myShell.sh\n./myShell.sh &\necho "最后的的进程号=$!"\necho "执行的值=$?"\n')])])]),s("h3",{attrs:{id:"运算符"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[a._v("#")]),a._v(" 运算符")]),a._v(" "),s("p",[a._v("在 Shell 中进行各种运算操作。")]),a._v(" "),s("h4",{attrs:{id:"基本语法-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法-4"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),s("ul",[s("li",[a._v("((运算式))\\或[运算式]")]),a._v(" "),s("li",[a._v("或 "),s("code",[a._v("expr m + n")]),a._v(" 注意 expr 运算符间要有空格")]),a._v(" "),s("li",[a._v("expr \\*，/， % 分别代表乘，除，取余")])]),a._v(" "),s("h4",{attrs:{id:"快速入门-4"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门-4"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\n#案例1：计算（2+3）X4 的值\n#使用第一种方式\nRES1=$(((2+3)*4))\necho "res1=$RES1"\n#使用第二种方式\nRES2=$[(2+3)*4]\necho "res2=$RES2"\n#使用第三种方式\nTEMP=`expr 2 + 3`\nRES3=`expr $TEMP \\* 4`\necho "temp=$TEMP"\necho "res3=$RES3"\necho "执行的值=$?"\n#案例2：请求出命令行的两个参数[整数]的和\nSUM=$[$1+$2]\necho "sum=$SUM"\n')])])]),s("h3",{attrs:{id:"条件判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#条件判断"}},[a._v("#")]),a._v(" 条件判断")]),a._v(" "),s("h4",{attrs:{id:"判断语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断语句"}},[a._v("#")]),a._v(" 判断语句")]),a._v(" "),s("p",[a._v("[ condition ]（注意 condition 前后要有空格），非空返回 true，可使用$?验证（0 为 true，>1 为 false）")]),a._v(" "),s("h4",{attrs:{id:"常用判断条件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用判断条件"}},[a._v("#")]),a._v(" 常用判断条件")]),a._v(" "),s("h5",{attrs:{id:"字符串比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符串比较"}},[a._v("#")]),a._v(" 字符串比较")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选项")]),a._v(" "),s("th",[a._v("含义")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("=")]),a._v(" "),s("td",[a._v("字符串是否相等")])])])]),a._v(" "),s("h5",{attrs:{id:"两个整数的比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两个整数的比较"}},[a._v("#")]),a._v(" 两个整数的比较")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选项")]),a._v(" "),s("th",[a._v("含义")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("-lt")]),a._v(" "),s("td",[a._v("小于")])]),a._v(" "),s("tr",[s("td",[a._v("-le")]),a._v(" "),s("td",[a._v("小于等于")])]),a._v(" "),s("tr",[s("td",[a._v("-eq")]),a._v(" "),s("td",[a._v("等于")])]),a._v(" "),s("tr",[s("td",[a._v("-gt")]),a._v(" "),s("td",[a._v("大于")])]),a._v(" "),s("tr",[s("td",[a._v("-ge")]),a._v(" "),s("td",[a._v("大于等于")])]),a._v(" "),s("tr",[s("td",[a._v("-ne")]),a._v(" "),s("td",[a._v("不等于")])])])]),a._v(" "),s("h5",{attrs:{id:"按照文件权限进行判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按照文件权限进行判断"}},[a._v("#")]),a._v(" 按照文件权限进行判断")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选项")]),a._v(" "),s("th",[a._v("含义")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("-r")]),a._v(" "),s("td",[a._v("有读的权限")])]),a._v(" "),s("tr",[s("td",[a._v("-w")]),a._v(" "),s("td",[a._v("有写的权限")])]),a._v(" "),s("tr",[s("td",[a._v("-x")]),a._v(" "),s("td",[a._v("有执行的权限")])])])]),a._v(" "),s("h5",{attrs:{id:"按照文件类型进行判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按照文件类型进行判断"}},[a._v("#")]),a._v(" 按照文件类型进行判断")]),a._v(" "),s("table",[s("thead",[s("tr",[s("th",[a._v("选项")]),a._v(" "),s("th",[a._v("含义")])])]),a._v(" "),s("tbody",[s("tr",[s("td",[a._v("-f")]),a._v(" "),s("td",[a._v("文件存在并且是一个常规的文件")])]),a._v(" "),s("tr",[s("td",[a._v("-e")]),a._v(" "),s("td",[a._v("文件存在")])]),a._v(" "),s("tr",[s("td",[a._v("-d")]),a._v(" "),s("td",[a._v("文件存在并是一个目录")])])])]),a._v(" "),s("h4",{attrs:{id:"快速入门-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门-5"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\n#案例1：“ok”是否等于“ok”\n#判断语句：是否 =\nif [ "ok" == "ok" ]\nthen\n      echo "equal"\nfi\n#案例2：23是否大于等于22\n#判断语句：使用 -ge\nif [ 23 -ge 22 ]\nthen\n      echo "大于"\nfi\n#案例3：/root/shcode/aaa.txt 目录中的文件是否存在\n#判断语句：使用 -f\nif [ -f /root/shcode/aaa.txt ]\nthen\n      echo "存在"\nfi\n#其他案例\nif [ edu ]\nthen\n      echo "hello, edu"\nfi\n')])])]),s("h3",{attrs:{id:"if-判断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-判断"}},[a._v("#")]),a._v(" if 判断")]),a._v(" "),s("h4",{attrs:{id:"基本语法-5"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法-5"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("if [ 条件判断式 ]\nthen\n      程序\nfi\n")])])]),s("p",[a._v("或者")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("if [ 条件判断式 ]\nthen\n      程序\nelif [ 条件判断式 ]\nthen\n      程序\nfi\n")])])]),s("h4",{attrs:{id:"注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[a._v("#")]),a._v(" 注意事项")]),a._v(" "),s("p",[a._v("[ 条件判断式 ]中括号和条件判断式之间必须有空格，if 与 [ 之间也有空格")]),a._v(" "),s("h4",{attrs:{id:"快速入门-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门-6"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\n#案例：编写一个 Shell 程序，如果输入的参数，大于等于60，则输出“及格了”，如果小于60，则输出 “不及格”\nif [ $1 -ge 60 ]\nthen\n      echo "及格了"\nelif [ $1 -lt 60 ]\nthen\n      echo "不及格"\nfi\n')])])]),s("h3",{attrs:{id:"case-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#case-语句"}},[a._v("#")]),a._v(" case 语句")]),a._v(" "),s("h4",{attrs:{id:"基本语法-6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法-6"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('case $变量名 in\n"值 1")\n      如果变量的值等于值 1，则执行程序 1\n;;\n"值 2")\n      如果变量的值等于值 2，则执行程序 2\n;;\n      省略其他分支\n*)\n      如果变量的值都不是以上的值，则执行此程序\n;;\nesac\n')])])]),s("h4",{attrs:{id:"快速入门-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门-7"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\n#案例：当命令行参数是1时，输出“周一”，是2时，就输出“周二”，其它情况输出“other”\ncase $1 in\n"1")\n      echo "周一"\n;;\n"2")\n      echo "周二"\n;;\n*)\n      echo "other"\n;;\nesac\n')])])]),s("h3",{attrs:{id:"for-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-语句"}},[a._v("#")]),a._v(" for 语句")]),a._v(" "),s("h4",{attrs:{id:"for-in-基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in-基本语法"}},[a._v("#")]),a._v(" for-in 基本语法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("for 变量 in 值1 值2 值3 ...\ndo\n      程序\ndone\n")])])]),s("h4",{attrs:{id:"for-in-快速入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-in-快速入门"}},[a._v("#")]),a._v(" for-in 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\n#案例：打印命令行输入的参数【可以看出$*和$@的区别】\n#注意 $* 是把输入的参数，当作一个整体，所以只会输出一行\nfor i in "$*"\ndo\n      echo "num is $i"\ndone\n#使用 $@ 是把输入的参数，分别对待，所以有几个参数，就会输出几行\nfor j in "$@"\ndo\n      echo "num is $j"\ndone\n')])])]),s("h4",{attrs:{id:"for-基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-基本语法"}},[a._v("#")]),a._v(" for 基本语法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("for (( 初始值;循环控制条件;变量变化 ))\ndo\n      程序\ndone\n")])])]),s("h4",{attrs:{id:"for-快速入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#for-快速入门"}},[a._v("#")]),a._v(" for 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\n#案例：从1加到100的值输出显示\n#定义一个变量 SUM\nSUM=0\nfor (( i=1;i<=100;i++ ))\ndo\n      SUM=$[$SUM+i]\ndone\necho "总和SUM=$SUM"\n')])])]),s("h3",{attrs:{id:"while-语句"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#while-语句"}},[a._v("#")]),a._v(" while 语句")]),a._v(" "),s("h4",{attrs:{id:"基本语法-7"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法-7"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("while [ 条件判断式 ]\ndo\n      程序\ndone\n")])])]),s("h4",{attrs:{id:"注意事项-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意事项-2"}},[a._v("#")]),a._v(" 注意事项")]),a._v(" "),s("p",[a._v("[ 条件判断式 ]中括号和条件判断式之间必须有空格，while 与 [ 之间也有空格")]),a._v(" "),s("h4",{attrs:{id:"快速入门-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门-8"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\n#案例：从命令行输入一个数 n，统计从 1+...+ n 的值\nSUM=0\ni=0\nwhile [ $i -le $1 ]\ndo\n      SUM=$[$i+$SUM]\n      i=$[$i+1]\ndone\necho "总和SUM=$SUM"\n')])])]),s("h3",{attrs:{id:"read-读取控制台输入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#read-读取控制台输入"}},[a._v("#")]),a._v(" read 读取控制台输入")]),a._v(" "),s("h4",{attrs:{id:"基本语法-8"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法-8"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),s("p",[a._v("read [选项] [参数]")]),a._v(" "),s("h4",{attrs:{id:"选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选项"}},[a._v("#")]),a._v(" 选项")]),a._v(" "),s("p",[a._v("-p：指定读取值时的提示符；"),s("br"),a._v("\n-t：指定读取值时等待的时间（秒），如果没有在指定的时间内输入，就不再等待了。")]),a._v(" "),s("h4",{attrs:{id:"参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[a._v("#")]),a._v(" 参数")]),a._v(" "),s("p",[a._v("变量：指定读取值的变量名")]),a._v(" "),s("h4",{attrs:{id:"快速入门-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门-9"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\n#案例1：读取控制台输入一个 NUM1 值\nread -p "请输入一个数NUM1=" NUM1\necho "您输入数NUM1=$NUM1"\n#案例2：读取控制台输入一个 NUM2 值，在 10 秒内输入\nread -t 10 -p "请输入一个数NUM2=" NUM2\necho "您输入数NUM2=$NUM2"\n')])])]),s("h3",{attrs:{id:"系统函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统函数"}},[a._v("#")]),a._v(" 系统函数")]),a._v(" "),s("h4",{attrs:{id:"basename-基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#basename-基本语法"}},[a._v("#")]),a._v(" basename 基本语法")]),a._v(" "),s("ul",[s("li",[a._v("basename [pathname] [suffix]：返回完整路径最后 / 的部分，常用于获取文件名。")]),a._v(" "),s("li",[a._v("basename [string] [suffix]：会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。")])]),a._v(" "),s("p",[a._v("选项："),s("br"),a._v("\nsuffix 为后缀，如果 suffix 被指定了，basename 会将 pathname 或 string 中的 suffix 去掉。")]),a._v(" "),s("h4",{attrs:{id:"dirname-基本语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dirname-基本语法"}},[a._v("#")]),a._v(" dirname 基本语法")]),a._v(" "),s("h5",{attrs:{id:"功能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#功能"}},[a._v("#")]),a._v(" 功能")]),a._v(" "),s("p",[a._v("返回完整路径最后 / 的前面的部分，常用于返回路径部分。")]),a._v(" "),s("p",[a._v("dirname 文件绝对路径：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分）。")]),a._v(" "),s("h5",{attrs:{id:"快速入门-10"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门-10"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),s("p",[a._v("案例1：请返回 /home/aaa/test.txt 的 test.txt 部分"),s("br"),a._v("\nbasename /home/aaa/test.txt")]),a._v(" "),s("p",[a._v("案例2：请返回 /home/aaa/test.txt 的 /home/aaa 部分"),s("br"),a._v("\ndirname /home/aaa/test.txt")]),a._v(" "),s("h3",{attrs:{id:"自定义函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义函数"}},[a._v("#")]),a._v(" 自定义函数")]),a._v(" "),s("h4",{attrs:{id:"基本语法-9"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本语法-9"}},[a._v("#")]),a._v(" 基本语法")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v("[ function ] funname[()]\n{\n      Action;\n      [return int;]\n}\n")])])]),s("p",[a._v("调用直接写函数名：funname [值]")]),a._v(" "),s("h4",{attrs:{id:"快速入门-11"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速入门-11"}},[a._v("#")]),a._v(" 快速入门")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[a._v('#!/bin/bash\n#案例1：计算输入两个参数的和（动态获取），getSum\n#定义函数 getSum\nfunction getSum()\n{\n      SUM=$[$NUM1+$NUM2]\n      echo "和是=$SUM"\n}\n#输入两个值\nread -p "请输入一个数NUM1=" NUM1\nread -p "请输入一个数NUM2=" NUM2\n#调用自定义函数\ngetSum $NUM1 $NUM2\n')])])])])}),[],!1,null,null,null);t.default=n.exports}}]);