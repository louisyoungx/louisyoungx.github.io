import{c as n}from"./app.025b21ba.js";import{_ as a}from"./plugin-vue_export-helper.21dcd24c.js";const s={},e=n(`<p>This article is mainly about how vue reactivity module work, and lightweight reactivity module of vue2 &amp; vue3 is given as an example.</p><p>In this article, I will introduce what is <code>reactivity</code>, how <code>activeEffect</code> and <code>watchEffect</code> work, then will building a reactivity demo from scratch, then will show how vue2 use <code>Object.defineProperty</code> convert the normal data into a reactive data. Next will explain why vue3 use <code>Proxy</code> instead of <code>Object.defineProperty</code>, why vue3 store dependences in <code>WeakMap</code>, and the defference of <code>WeakMap</code> and <code>Map</code>.</p><h2 id="what-is-reactive-data-in-vue" tabindex="-1"><a class="header-anchor" href="#what-is-reactive-data-in-vue" aria-hidden="true">#</a> What is reactive data in Vue</h2><p>Reactive data in vue means, once you change the value of it, will automatically trigger(notify) and rerun functions(dependences) that be collected in its subscribers set.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// create a reactive object</span>
<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dependence</span><span class="token punctuation">(</span><span class="token string">&#39;This is a message&#39;</span><span class="token punctuation">)</span>

<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// This anonymous function is the dependence that needs to be collected</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment">// OUTPUT - This is a message</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// if change the value of msg, the dependence function will rerun</span>
msg<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;Message updated&#39;</span> <span class="token comment">// OUTPUT - Message updated</span>
</code></pre></div><h2 id="building-reactivity-from-scratch" tabindex="-1"><a class="header-anchor" href="#building-reactivity-from-scratch" aria-hidden="true">#</a> Building reactivity from scratch</h2><p>So how does Vue do dependency collection?</p><p><a href="https://codepen.io/louisyoungx/pen/yLzENNo" target="_blank" rel="noopener noreferrer">Online Demo - Building reactivity from scratch</a></p><h3 id="save-effect-function-to-a-global-variable" tabindex="-1"><a class="header-anchor" href="#save-effect-function-to-a-global-variable" aria-hidden="true">#</a> Save <code>effect</code> function to a global variable</h3><p>There is a global variable called <code>activeEffect</code>.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> activeEffect <span class="token comment">// save the function that running in the watchEffect Function</span>
</code></pre></div><p>The <code>activeEffect</code> will save the function that running in a function named <code>watchEffect</code></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// arg effect is a function</span>
    activeEffect <span class="token operator">=</span> effect
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// effect function should be one synchronous operation</span>
    activeEffect <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The arg <code>effect</code> of <code>watchEffect</code> is a function, the main role of <code>watchEffect</code> is:</p><ul><li>Before <code>effect</code> run, save this <code>effect</code> function to the <code>activeEffect</code> variable</li><li>execute the <code>effect</code> function</li><li>After <code>effect</code> run, set <code>activeEffect</code> variable to null</li></ul><blockquote><p><em>Tips: the <code>effect</code> function should be a synchronous operation, or the dependence collection won&#39;t work as expected</em></p></blockquote><h3 id="dependence-class-collect-effect-depend" tabindex="-1"><a class="header-anchor" href="#dependence-class-collect-effect-depend" aria-hidden="true">#</a> <code>Dependence</code> class collect <code>effect</code> depend</h3><p>For convenience of understanding, think of <code>Dependence</code> as a class.</p><p>The <code>Dependence</code> class has five methods</p><ul><li><code>constructor(value)</code> - takes a <code>value</code> arg as its reactive data</li><li><code>get value() </code> - rewrite get function of value, to run depend() function before assign.</li><li><code>set value()</code> - rewrite set function of value, to run notify() function after change value</li><li><code>depend()</code> - alias <code>tracker</code>, add the dependency function in <code>activeEffect</code> to subscriber set</li><li><code>notify()</code> - alias <code>trigger</code>, rerun dependency funcntions in subscriber set</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dependence</span> <span class="token punctuation">{</span>

    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value
    <span class="token punctuation">}</span>

    <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value
    <span class="token punctuation">}</span>

    <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> value
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// alias - tracker</span>
        <span class="token comment">// add the function saved in the activeEffect to subscribers</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// alias - trigger</span>
        <span class="token comment">// notify subscriber</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p><em>Notice: vue3 extract the <code>depend</code> and <code>notify</code> logic in to something external, so that vue can make it reuseable across both <code>ref</code> and <code>reactive</code> objects.</em></p></blockquote><h3 id="an-edge-case" tabindex="-1"><a class="header-anchor" href="#an-edge-case" aria-hidden="true">#</a> An edge case</h3><p>A edge case that this demo didn&#39;t really cover</p><p><a href="https://codepen.io/louisyoungx/pen/yLzENNo" target="_blank" rel="noopener noreferrer">Online Demo - Building reactivity from scratch</a></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> unlock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dependence</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dependence</span><span class="token punctuation">(</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span>

<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>unlock<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// the notify of msg.value is depend on the unlock.value</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Locked&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

msg<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;be tracked&#39;</span>

unlock<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// the notify of msg.value should not be rerun</span>
msg<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;should not be triggered&#39;</span>
unlock<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>
msg<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&#39;should be triggered&#39;</span>
</code></pre></div><p>even when it&#39;s locked, the console.log(msg.value) still be triggered but the ideal output is nothing in vue3</p><p>before each effect to be run again, we need to clean up its dependency, so that it recollects its dependencies in fresh.</p><p>this is really just say that our current implementation does illustrate the basic ideas,</p><p>but it&#39;s far from bulletproof in practical-use cases.</p><p>so if you&#39;re interested, look at the actual source code.</p><h2 id="reactivity-module-of-vue2" tabindex="-1"><a class="header-anchor" href="#reactivity-module-of-vue2" aria-hidden="true">#</a> Reactivity Module of Vue2</h2><p><a href="https://codepen.io/louisyoungx/pen/rNGKVOd" target="_blank" rel="noopener noreferrer">Online Demo - Reactivity Module of Vue2</a></p><p>The actual Dependency module is a little different from our previous demo</p><p>let&#39;s rewrite the Dependence class</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Dependence</span> <span class="token punctuation">{</span>
    subscribers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    activeEffect <span class="token operator">=</span> effect
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    activeEffect <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p><em>Notice: in vue source code, there is no dependence class, think it a class will make it easier to understand.</em></p></blockquote><h3 id="how-vue2-convert-the-normal-data-to-a-reactive-data" tabindex="-1"><a class="header-anchor" href="#how-vue2-convert-the-normal-data-to-a-reactive-data" aria-hidden="true">#</a> How Vue2 convert the normal data to a reactive data</h3><p>In Vue2 Options API, there is a <code>data</code> function to store the reactive data</p><p>So how vue convert the normal data to a reactive data?</p><p>There is a <code>reactive</code> function in vue2, it takes a <code>data</code> arg,</p><p><code>reactive</code> function will traverse all keys in the <code>data</code> object, and use <code>Object.defineProperty()</code> to rewrite the get and set function.</p><blockquote><p><em>Notice: the reactive data should be an object, the reactive array implementation in vue2 need to change the prototype of <code>Array</code></em></p></blockquote><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dependence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// this dep is in a iteration closure</span>
        <span class="token keyword">let</span> value <span class="token operator">=</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> value
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                value <span class="token operator">=</span> newValue
                dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data
<span class="token punctuation">}</span>
</code></pre></div><blockquote><p><em>Notice: the dependence object is saved in a iteration closure</em></p></blockquote><h3 id="vue2-use-object-defineproperty-for-data-hijacking" tabindex="-1"><a class="header-anchor" href="#vue2-use-object-defineproperty-for-data-hijacking" aria-hidden="true">#</a> Vue2 use <code>Object.defineProperty</code> for data hijacking</h3><p>Vue2 use Object.defineProperty to change the property set/get of Object value</p><p>the disadvantage of that is when you add additional properties, need to add them in especially because adding a peoperty doesn&#39;t give them automatically getters and setters.</p><p>so that vue2 can only convert keys that&#39;s already on the object.</p><h2 id="reactivity-module-of-vue3" tabindex="-1"><a class="header-anchor" href="#reactivity-module-of-vue3" aria-hidden="true">#</a> Reactivity Module of Vue3</h2><p><a href="https://codepen.io/louisyoungx/pen/oNGyXbV" target="_blank" rel="noopener noreferrer">Online Demo - Reactivity Module of Vue3</a></p><p>The <code>Dependence</code> class implementation of vue3 is the same as vue2.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> activeEffect
<span class="token keyword">class</span> <span class="token class-name">Dependence</span> <span class="token punctuation">{</span>
    subscribers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subscribers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">effect</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token parameter">effect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    activeEffect <span class="token operator">=</span> effect
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// effect function should be one synchronous operation</span>
    activeEffect <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="why-vue3-use-proxy-instead-of-object-defineproperty" tabindex="-1"><a class="header-anchor" href="#why-vue3-use-proxy-instead-of-object-defineproperty" aria-hidden="true">#</a> Why Vue3 use <code>Proxy</code> instead of <code>Object.defineProperty</code></h3><p>Vue3 use Proxy to handle raw data object.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noopener noreferrer">Proxy MDN Docs</a></p><p>Proxy based implemention, vue are able to detect newly added properties, cause reactivity is on the object, not on the object properties.</p><p>Proxy allows to use more trap like <code>has</code> or <code>ownKeys</code>.</p><p>Proxy and it&#39;s reativeHandlers works on arrays as well.</p><p>The <code>reactive</code> function in vue3 is like</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> reativeHandlers<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The Proxy need a <code>reativeHandlers</code> object.</p><p>Why the methods of reativeHandlers return a Reflect?</p><p>This is because, when you have objects that with prototypal inheritance, and only in this cases, our receiver and target will actually point to different things.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> reativeHandlers <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// get trap</span>
        <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token function">getDep</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
        dep<span class="token punctuation">.</span><span class="token function">depend</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// set trap</span>
        <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token function">getDep</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
        <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>
        dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">has</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// has trap</span>

        <span class="token comment">// code like:</span>
        <span class="token comment">// &#39;msg&#39; in state</span>
        <span class="token comment">// will trigger this trap</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">ownKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ownKeys trap</span>

        <span class="token comment">// code like:</span>
        <span class="token comment">// Object.keys(state)</span>
        <span class="token comment">// will trigger this trap</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In vue2, the dependency subscribers is saved in a iteration closure.</p><p>So how vue3 save its dependences?</p><h3 id="vue3-save-dependences-in-weakmap" tabindex="-1"><a class="header-anchor" href="#vue3-save-dependences-in-weakmap" aria-hidden="true">#</a> Vue3 save dependences in <code>WeakMap</code></h3><p>Vue3 Save all dependences in a WeakMap</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap" target="_blank" rel="noopener noreferrer">WeakMap MDN Docs</a></p><h4 id="why-weakmap" tabindex="-1"><a class="header-anchor" href="#why-weakmap" aria-hidden="true">#</a> Why <code>WeakMap</code>?</h4><p>Because a WeakMap can only use objects as keys, and the nice thing about WeakMap is if this target object itself becomes no longer accessible from any code, and this target can be garbage collected, then its associated value entry in the WeakMap will also be garbage collected.</p><h4 id="difference-of-map-weakmap" tabindex="-1"><a class="header-anchor" href="#difference-of-map-weakmap" aria-hidden="true">#</a> Difference of <code>Map</code> &amp; <code>WeakMap</code></h4><p>In comparison, the map it allows you to use anything as a key, and the downside of that is when the key is string or anything, you won&#39;t be automatically drop the memory association.</p><p>Also, because it doesn&#39;t have this garbage collectible property, so the map can be iterated, you can enumerate all the keys.</p><p>You can&#39;t iterate over WeakMap, because if you can iterate enumerate the keys, the all the keys needs to be essentially kept in a constant reference somewhere, which makes them unable to be garbage collected.</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> targetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// use WeakMap to storage dependencies of raw data object key property</span>

<span class="token keyword">function</span> <span class="token function">getDep</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        targetMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> depsMap<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dependence</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        depsMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> dep<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dep
<span class="token punctuation">}</span>
</code></pre></div><p>For each target object, we will have a map, that contains all the deps associated to that object. <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="noopener noreferrer">Map MDN Docs</a></p><h2 id="get-source-code" tabindex="-1"><a class="header-anchor" href="#get-source-code" aria-hidden="true">#</a> Get source code</h2><p>Three <strong>Online Demo</strong> with source code</p><p><a href="https://codepen.io/louisyoungx/pen/yLzENNo" target="_blank" rel="noopener noreferrer">Online Demo - Building reactivity from scratch</a></p><p><a href="https://codepen.io/louisyoungx/pen/rNGKVOd" target="_blank" rel="noopener noreferrer">Online Demo - Reactivity Module of Vue2</a></p><p><a href="https://codepen.io/louisyoungx/pen/oNGyXbV" target="_blank" rel="noopener noreferrer">Online Demo - Reactivity Module of Vue3</a></p><blockquote><p>All knowledge points are extracted from <a href="https://www.vuemastery.com/courses/vue3-deep-dive-with-evan-you/" target="_blank" rel="noopener noreferrer">Evan You&#39;s Vue Mastery Course</a>, so if there are errors in this article, <s>it must be Evan You&#39;s mistake</s> please point out errors in the comments section.</p></blockquote>`,84);function t(o,p){return e}var i=a(s,[["render",t]]);export{i as default};
