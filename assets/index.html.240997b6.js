import{r as e,o as p,a as o,b as n,d as a,w as t,F as c,e as i,c as l}from"./app.39f154ca.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const r={},k=n("code",null,"English Version",-1),d=i(" | "),h=n("code",null,"\u4E2D\u6587\u7248\u672C",-1),y=l(`<p>A few days ago, I encountered many users feedback in an open source project.</p><p>The Problem is they can not install the dependencies, such as execute <code>pip install -r requirements.txt</code> but nothing happened.</p><p>There are many problems like the wrong config of env that can cause this result and it&#39;s troublesome to check them one by one.</p><p>To solve this problem once and for all, we usually go to <code>site-packages</code> and put the required packages in the project root directory.</p><p>it&#39;s crude, not elegant.</p><p>So I wanted to load packages dynamically. if package do not exist, use <code>pip</code> to download them.</p><p>I searched Google roughly, it seems no one have mention this method, and I feel it&#39;s convenient to use, so I share it.</p><blockquote><p>Although dypend is packaged for everyone to download, however that it depends on pip, which is against the intention of doing dynamic dependencies.</p><p>So I recommend using the <code>Quick Start - Run by injecting code</code> approach</p></blockquote><h2 id="quick-start" tabindex="-1"><a class="header-anchor" href="#quick-start" aria-hidden="true">#</a> Quick start</h2><blockquote><p>Github dypend - https://github.com/louisyoungx/dypend Could you give dypend a star, I really need it, Thank you!</p></blockquote><h3 id="run-by-pip-install" tabindex="-1"><a class="header-anchor" href="#run-by-pip-install" aria-hidden="true">#</a> Run by <code>pip install</code></h3><p>Download the <code>dypend</code> package from <code>PyPI</code> .</p><div class="language-bash ext-sh"><pre class="language-bash"><code>pip <span class="token function">install</span> dypend
</code></pre></div><p>Freeze <code>requirements.txt</code> file.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>pip freeze <span class="token operator">&gt;</span> requirements.txt
</code></pre></div><p>import <code>dypend</code> at the top of the project&#39;s entry file, without changing any other code.</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> dypend
</code></pre></div><p><code>dypend</code> will check packages in <code>requirements.txt</code> is available or not in your Python environment, if not, <code>dypend</code> will call <code>pip</code> to download them.</p><h3 id="run-by-injecting-code" tabindex="-1"><a class="header-anchor" href="#run-by-injecting-code" aria-hidden="true">#</a> Run by injecting code</h3><p>Freeze <code>requirements.txt</code> file.</p><div class="language-bash ext-sh"><pre class="language-bash"><code>pip freeze <span class="token operator">&gt;</span>  requirements.txt
</code></pre></div><p>Add the following code to the top of the project&#39;s entry file, without changing any other code.</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> re
REQUIREMENTS <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;/requirements.txt&#39;</span>
<span class="token keyword">def</span> <span class="token function">getDepends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    requirements <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>REQUIREMENTS<span class="token punctuation">,</span> <span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span>
    libs <span class="token operator">=</span> requirements<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
    libList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> lib <span class="token keyword">in</span> libs<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            name <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&quot;^.+(?===)&quot;</span><span class="token punctuation">,</span> lib<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            version <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">&quot;(?&lt;===).+$&quot;</span><span class="token punctuation">,</span> lib<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            libDict <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>
                <span class="token string">&quot;version&quot;</span><span class="token punctuation">:</span> version
            <span class="token punctuation">}</span>
            libList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>libDict<span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
    <span class="token keyword">return</span> libList
<span class="token keyword">def</span> <span class="token function">importLib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Load python dependent libraries dynamically&quot;&quot;&quot;</span>

    libList <span class="token operator">=</span> getDepends<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">from</span> pip<span class="token punctuation">.</span>_internal <span class="token keyword">import</span> main <span class="token keyword">as</span> pip_main
    <span class="token keyword">import</span> importlib

    <span class="token keyword">def</span> <span class="token function">install</span><span class="token punctuation">(</span>package<span class="token punctuation">)</span><span class="token punctuation">:</span>
        pip_main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;install&#39;</span><span class="token punctuation">,</span> package<span class="token punctuation">]</span><span class="token punctuation">)</span>

    createVar <span class="token operator">=</span> <span class="token builtin">locals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> lib <span class="token keyword">in</span> libList<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>lib<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            createVar<span class="token punctuation">[</span>lib<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> importlib<span class="token punctuation">.</span>import_module<span class="token punctuation">(</span>lib<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                install<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;</span><span class="token interpolation"><span class="token punctuation">{</span>lib<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">==</span><span class="token interpolation"><span class="token punctuation">{</span>lib<span class="token punctuation">[</span><span class="token string">&quot;version&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
                createVar<span class="token punctuation">[</span>lib<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> importlib<span class="token punctuation">.</span>import_module<span class="token punctuation">(</span>lib<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
importLib
</code></pre></div><p><code>dypend</code> will check packages in <code>requirements.txt</code> is available or not in your Python environment, if not, <code>dypend</code> will call <code>pip</code> to download them.</p>`,24);function g(m,b){const s=e("RouterLink");return p(),o(c,null,[n("p",null,[a(s,{to:"/post/2021/12/10/dypend-dynamic-depends/"},{default:t(()=>[k]),_:1}),d,a(s,{to:"/post/2021/12/11/dypend-dynamic-depends/"},{default:t(()=>[h]),_:1})]),y],64)}var q=u(r,[["render",g]]);export{q as default};
